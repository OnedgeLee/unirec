experiment: exp_scaffold
mode: serve
resources:
  item_embeddings: data/item_emb.npy      # np.ndarray shape (N, d)
  item_ids: null                          # optional list of ids aligned to embeddings
  categories: {}                          # optional {item_id: category}
pipeline:
  - id: retriever1
    kind: retriever
    impl: unirec.plugins.retrieval.toy_dualtower:ToyDualTowerANN
    params: { topk: 500 }
  - id: retriever2
    kind: retriever
    impl: unirec.plugins.retrieval.toy_dualtower:ToyDualTowerANN
    params: { topk: 500 }
  - id: merge
    kind: merger
    impl: unirec.plugins.merge.union:WeightedUnion
    params:
      weights: { retriever1: 0.6, retriever2: 0.4 }
      topk: 800
  - id: ranker
    kind: ranker
    impl: unirec.plugins.rankers.bandit_ucb:UCBSequentialSlate
    params:
      K: 10
      alpha: 0.25
      position_weights: [1.0, 0.85, 0.75, 0.68, 0.62, 0.57, 0.53, 0.50, 0.47, 0.45]
      diversity_lambda: 0.15
  - id: rerank
    kind: reranker
    impl: unirec.plugins.rerank.mmr:MMR
    params: { lambda: 0.2 }
  - id: evaluator
    kind: evaluator
    impl: unirec.plugins.eval.evaluator:OfflineEvaluator
    params:
      K: 10
      metrics: ["NDCG@10", "Recall@10", "ILD@10", "Entropy@10", "Coverage@10"]
